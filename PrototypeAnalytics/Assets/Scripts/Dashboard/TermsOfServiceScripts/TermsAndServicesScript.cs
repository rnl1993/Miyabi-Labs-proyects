using System.IO; using System.Net; using UnityEngine; using UnityEngine.UI; using System.Net.Mail; using System.Collections; using System.Net.Security; using System.Collections.Generic; using System.Security.Cryptography.X509Certificates;  public class TermsAndServicesScript : MonoBehaviour {      // public variables.      public Text TermsOfServiceText;     public Scrollbar GetScrollbar;     public Toggle GetToggle;      public GameObject ToSCanvas;     // este bool es para que el mail de los terminos y condicciones se alcance a mandar antes de apagar el canvas donde aparecen.     public bool mailSend;      // private Variables.      // Los botones de los niveles, los busco porque los apago, ya que causan conflicto con el Raycast.     private ExerciseSceneScript[] GetExerciseScene;     // lo mismo que con los botones de los niveles.     private GameSceneScript GetGameSceneScript;     // El lector para Android.     private WWW reader;     private string path;     private string att;      // Functions     void Start () {          // aqui busco los objetos del dashboard a los que les voy a apagar sus colliders para que no puedan interactuar con ellos.         GetExerciseScene = FindObjectsOfType<ExerciseSceneScript>();         GetGameSceneScript = FindObjectOfType<GameSceneScript>();          // Este string es la locacion del archivo de texto de nuestros terminos y condicciones.         path = Path.Combine(Application.streamingAssetsPath, "Terms&Services.txt");         // Aqui busco el archivo de texto donde vamos a escribir los terminos y condicciones.         reader = new WWW(path);         // esto para que se lea el texto completo antes de copiarlo.         while (!reader.isDone) { }          // Aqui proyecto los terminos y condicciones en la pantalla.         TermsOfServiceText.text = reader.text;          att = Application.persistentDataPath + "/ToS.txt";         File.WriteAllText(att, TermsOfServiceText.text);          // Cuando el PlayerPref ya existe, automaticamente se apaga este canvas.         CloseToFCanvas();     }      // _________________________________________________________________________________________________________________________________________________________________________________________      void Update () {          if(OVRInput.Get(OVRInput.RawAxis2D.RTouchpad).y < 0){              GetScrollbar.value += OVRInput.Get(OVRInput.RawAxis2D.RTouchpad).y * Time.deltaTime;         }          if (OVRInput.Get(OVRInput.RawAxis2D.RTouchpad).y > 0){              GetScrollbar.value += OVRInput.Get(OVRInput.RawAxis2D.RTouchpad).y * Time.deltaTime;         }          DisableColliders();     }      // _________________________________________________________________________________________________________________________________________________________________________________________      // Esta funció desactiva los colliders de los demas botones, hasta que acepte los terminos y condiciones de la app.      void DisableColliders(){          // Si no a aceptado los terminos y condiciones este playerPrefs no existe.         if (PlayerPrefs.HasKey("Accepted") == false){              for (int i = 0; i < GetExerciseScene.Length; i++){                  GetExerciseScene[i].GetComponent<Collider>().enabled = false;             }              GetGameSceneScript.GetComponent<Collider>().enabled = false;         }          else{              for (int i = 0; i < GetExerciseScene.Length; i++){                  GetExerciseScene[i].GetComponent<Collider>().enabled = true;             }              GetGameSceneScript.GetComponent<Collider>().enabled = true;         }     }      // _________________________________________________________________________________________________________________________________________________________________________________________      public void SendMailFunction(){          StartCoroutine(SendMail());     }      // _________________________________________________________________________________________________________________________________________________________________________________________      IEnumerator SendMail() {          mailSend = false;         yield return new WaitForSeconds(0.0f);              MailMessage mail = new MailMessage{                  // Este va a ser el mail que le creamos al usuario.                 From = new MailAddress("n2500@live.com")             };             // Este va a ser nuestro mail, porque ahíamos a guardar que si aceptaron los terminos y condiciones.             mail.To.Add("ricardo.narvaez.loyola@hotmail.com");             // el proposito del correo.             mail.Subject = "Mail de pruebas de aceptació de los terminos y condicciones.";             // Aqui va el cuerpo del mail.             mail.Body = "Texto de pruebas unicamente, se aceptaron los terminos y condiciones.";              // En esta parte agrego el archivo de texto en el mail. Este texto es el de los terminos y condiciones que aceptaron.              Attachment attachment = new Attachment(att);             mail.Attachments.Add(attachment);              SmtpClient smtpServer = new SmtpClient{                  Host = "smtp.gmail.com",                 DeliveryMethod = SmtpDeliveryMethod.Network,                 Port = 587,                 // Apago las credenciales default, al parecer no se pueden usar y tienes que usar una “real”.                 UseDefaultCredentials = false,                 // Estas credenciales van a ser vas credenciales del mail sender que vamos a crear.                 Credentials = new NetworkCredential("ricardonarvaezloyola@gmail.com", "12121993") as ICredentialsByHost,                 EnableSsl = true             };              ServicePointManager.ServerCertificateValidationCallback = delegate (object s, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslpolicyErrors) {                  return true;             };             smtpServer.Send(mail);         mailSend = true;     }      // _________________________________________________________________________________________________________________________________________________________________________________________      public void CloseToFCanvas(){          // Aqui checo que ya alláceptado los terminos y condiciones, para apagar este canvas.         if(PlayerPrefs.HasKey("Accepted") == true){              // Apago los colliders de los niveles de atras.             for (int i = 0; i < GetExerciseScene.Length; i++){                  GetExerciseScene[i].GetComponent<Collider>().enabled = true;             }              GetGameSceneScript.GetComponent<Collider>().enabled = true;              // Aqui apago este canvas.             ToSCanvas.gameObject.SetActive(false);         }     } }