using UnityEngine;  public class CorrectObject : MonoBehaviour {      // Private variables.      // Este es el nombre de la metrica que se va a escribir.     private string MetricName;     // Este es el valor de la metrica por ronda de instruccióue se va a escribir.     private int MetricValuePerInstruction;     // Este valor es la suma total de todas las rondas de instrucciones de esta metrica.     private int FinalMetricValue;      // Script references.     private ObjToPaint ToPaint;     private InstructionsScript GetInstructionsScript;     private RaycastPalleteScript GetRaycastPalleteScript;     //     private InstructionsScript GetInstructionScript;     // Una referencia a mi propio codigo para poder accesar a sus funciones.     private Metric MetricScript;      // Functions     void Start(){          GetRaycastPalleteScript = FindObjectOfType<RaycastPalleteScript>();         // Este script es a donde voy a enviar las metricas procesadas.         MetricScript = GetComponent<Metric>();          GetInstructionsScript = FindObjectOfType<InstructionsScript>();         /* Busco el script de las instrucciones, para poder comparar el objeto que pasa             el raycast con el nombre del objeto que esta pidiendo las instrucciones. */         GetInstructionScript = FindObjectOfType<InstructionsScript>();          MetricName = GetInstructionsScript.EnglishM == false ? "Figuras Correctas " : "Correct Objects ";
    }      // _________________________________________________________________________________________________________________________________________________________________________________________      public void ObjectIsCorrect(string RaycastObject, string RaycastSize, string RaycastSide){

        ToPaint = GetRaycastPalleteScript.hit.collider.gameObject.GetComponent<ObjToPaint>();

        if (ToPaint.ObjectAlreadyCounted == 0){              if (GetInstructionScript.Level < 3){                  if (RaycastObject == GetInstructionScript.ObjectValue){                      CountMetricPerInstruction();                 }             } // ___________________________________________

            if (GetInstructionScript.Level == 3){                  if (RaycastObject == GetInstructionScript.ObjectValue && RaycastSize == GetInstructionScript.ObjectSize){                      CountMetricPerInstruction();                 }             } // ___________________________________________

            if (GetInstructionScript.Level == 4){                  if ((RaycastObject == GetInstructionScript.ObjectValue && RaycastSize == GetInstructionScript.ObjectSize) || (RaycastObject == GetInstructionScript.ObjectValue2 && RaycastSize == GetInstructionScript.ObjectSize2)){                      CountMetricPerInstruction();                 }             }// ___________________________________________

            if (GetInstructionScript.Level == 5){                  if ((RaycastObject == GetInstructionScript.ObjectValue && RaycastSize == GetInstructionScript.ObjectSize && RaycastSide == GetInstructionScript.ObjectSide)                 || (RaycastObject == GetInstructionScript.ObjectValue2 && RaycastSize == GetInstructionScript.ObjectSize2 && RaycastSide == GetInstructionScript.ObjectSide2)){                      CountMetricPerInstruction();                 }             }         }     }      // _________________________________________________________________________________________________________________________________________________________________________________________      // Esta funcióuenta cuantas veces el niñ cumplióas condiciones de esta mérica.      void CountMetricPerInstruction(){          MetricValuePerInstruction++;     }      // _________________________________________________________________________________________________________________________________________________________________________________________      // Esta funció procesa la informació de cada ronda de instrucciones.     public void CopyCountMetricPerInstruction(){          // Aqui voy guardando la suma final de todas las veces que se selecciono un objeto correcto.         FinalMetricValue += MetricValuePerInstruction;         // Aqui Genero el string de la metrica que se va a mandar escribir en el documento de texto.         MetricScript.CopyPerInstructionMetrics(MetricName + " = ", MetricValuePerInstruction, "\n\n");         MetricValuePerInstruction = 0;              }      // _________________________________________________________________________________________________________________________________________________________________________________________      // Esta funció lo que hace es crear la ultima entrada de metricas para el archivo de texto con los resultados finales.     public void EndGameMetricValues(){          if (GetInstructionsScript.EnglishM == false){
            MetricScript.FinalLogWrite("Suma final " + MetricName + " = ", FinalMetricValue, "\n\n");
        }          else{
            MetricScript.FinalLogWrite("Final Result " + MetricName + " = ", FinalMetricValue, "\n\n");         }     } }