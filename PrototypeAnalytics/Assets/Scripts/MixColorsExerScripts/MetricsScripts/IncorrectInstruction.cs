using UnityEngine;  public class IncorrectInstruction : MonoBehaviour{      // Private variables.      // Este es el nombre de la metrica que se va a escribir.     private string MetricName;     // Este es el valor de la metrica por ronda de instrucció que se va a escribir.     private int MetricValuePerInstruction;     // Este valor es la suma total de todas las rondas de instrucciones de esta metrica.     private int FinalMetricValue;      // Script references.     private InstructionsScript GetInstructionScript;     // Una referencia a mi propio codigo para poder accesar a sus funciones.     private Metric MetricScript;      // Functions     void Start(){          // Este script es a donde voy a enviar las metricas procesadas.         MetricScript = GetComponent<Metric>();         /* Busco el script de las instrucciones, para poder comparar el objeto que pasa             el raycast con el nombre del objeto que esta pidiendo las instrucciones. */         GetInstructionScript = FindObjectOfType<InstructionsScript>();          MetricName = GetInstructionScript.EnglishM == false ? "Instrucción Incorrecta " : "Incorrect Instruction";     }      // _________________________________________________________________________________________________________________________________________________________________________________________      public void InstructionIsIncorrect(string RaycastObject, string RaycastSize, string RaycastSide, string RaycastColor, string RaycastColor2){          if (GetInstructionScript.Level < 3){              if (RaycastObject != GetInstructionScript.ObjectValue && RaycastColor != GetInstructionScript.ColorValue){                  CountMetricPerInstruction();             }         }          if (GetInstructionScript.Level == 3){              if (RaycastObject != GetInstructionScript.ObjectValue && RaycastSize != GetInstructionScript.ObjectSize && RaycastColor != GetInstructionScript.ColorValue){                  CountMetricPerInstruction();             }         }          if (GetInstructionScript.Level == 4){              /* Aqui tengo que checar por 4 posibles versiones de lo que es una instrucció incorrecta:               * objeto, tamañ y la combinació de colores es incorrecta de la instruccion 1              * objeto, tamañ y la combinació de colores es incorrecta pero al revez de la instruccion 1              * objeto, tamañ y la combinació de colores es incorrecta de la instruccion 2              * objeto, tamañ y la combinació de colores es incorrecta pero al revez de la instruccion 2 */             if (RaycastObject != GetInstructionScript.ObjectValue && RaycastSize != GetInstructionScript.ObjectSize && RaycastColor != GetInstructionScript.ColorValue && RaycastColor2 != GetInstructionScript.ColorValue2){                  if(RaycastObject != GetInstructionScript.ObjectValue && RaycastSize != GetInstructionScript.ObjectSize && RaycastColor != GetInstructionScript.ColorValue2 && RaycastColor2 != GetInstructionScript.ColorValue) {                      if(RaycastObject != GetInstructionScript.ObjectValue2 && RaycastSize != GetInstructionScript.ObjectSize2 && RaycastColor != GetInstructionScript.ColorValueIn2 && RaycastColor2 != GetInstructionScript.ColorValue2In2) {                          if(RaycastObject != GetInstructionScript.ObjectValue2 && RaycastSize != GetInstructionScript.ObjectSize2 && RaycastColor != GetInstructionScript.ColorValue2In2 && RaycastColor2 != GetInstructionScript.ColorValueIn2){                              CountMetricPerInstruction();                         }                     }                 }             }         }          if (GetInstructionScript.Level == 5){              /* Aqui tengo que checar por 4 posibles versiones de lo que es una instrucció correcta:               * objeto, tamañ, lado y la combinació de colores es incorrecta de la instruccion 1              * objeto, tamañ, lado y la combinació de colores es incorrecta pero al revez de la instruccion 1              * objeto, tamañ, lado y la combinació de colores es incorrecta de la instruccion 2              * objeto, tamañ, lado y la combinació de colores es incorrecta pero al revez de la instruccion 2 */             if (RaycastObject != GetInstructionScript.ObjectValue && RaycastSize != GetInstructionScript.ObjectSize && RaycastSide != GetInstructionScript.ObjectSide && RaycastColor != GetInstructionScript.ColorValue && RaycastColor2 != GetInstructionScript.ColorValue2){                  if(RaycastObject != GetInstructionScript.ObjectValue && RaycastSize != GetInstructionScript.ObjectSize && RaycastSide != GetInstructionScript.ObjectSide && RaycastColor != GetInstructionScript.ColorValue2 && RaycastColor2 != GetInstructionScript.ColorValue){                      if(RaycastObject != GetInstructionScript.ObjectValue2 && RaycastSize != GetInstructionScript.ObjectSize2 && RaycastSide != GetInstructionScript.ObjectSide && RaycastColor != GetInstructionScript.ColorValueIn2 && RaycastColor2 != GetInstructionScript.ColorValue2In2){                          if(RaycastObject != GetInstructionScript.ObjectValue2 && RaycastSize != GetInstructionScript.ObjectSize2 && RaycastSide != GetInstructionScript.ObjectSide && RaycastColor != GetInstructionScript.ColorValue2In2 && RaycastColor2 != GetInstructionScript.ColorValueIn2){                              CountMetricPerInstruction();                         }                     }                 }             }         }     }      // _________________________________________________________________________________________________________________________________________________________________________________________      // Esta funció cuenta cuantas veces el niñ cumplióas condiciones de esta metrica.      void CountMetricPerInstruction(){          MetricValuePerInstruction++;     }      // _________________________________________________________________________________________________________________________________________________________________________________________      // Esta funció procesa la informació de cada ronda de instrucciones.     public void CopyCountMetricPerInstruction(){          // Aqui voy guardando la suma final de todas las veces que se selecciono un objeto correcto.         FinalMetricValue += MetricValuePerInstruction;         // Aqui Genero el string de la metrica que se va a mandar escribir en el documento de texto.         MetricScript.CopyPerInstructionMetrics(MetricName + " = ", MetricValuePerInstruction, "\n\n");         MetricValuePerInstruction = 0;     }      // _________________________________________________________________________________________________________________________________________________________________________________________      // Esta funció lo que hace es crear la ultima entrada de metricas para el archivo de texto con los resultados finales.     public void EndGameMetricValues(){          MetricScript.FinalLogWrite("Suma final " + MetricName + " = ", FinalMetricValue, "\n\n");     } }