using System; using System.IO; using System.Linq; using UnityEngine; using System.Collections; using System.Collections.Generic;  public class MaxReactTime : MonoBehaviour{      // Este bool es para evitar que se mida el tiempo de reacció má de una vez por ronda de instrucciones.     private bool IsCounted;      private readonly List<float> ReactionsTimesList = new List<float>();      // El string del tiempo de reacció promedio del niñ.     private string AverageTOR;     // Aqui registro el momento en el que el niñ selecciono el primer objeto de cada ronda de instrucció.     private DateTime ButtonPress;     // Este es el tiempo de reacción del niño.     private TimeSpan TimeToReact;     // Este es el valor de la métrica por ronda de instrucció que se va a escribir.     private float MetricValuePerInstruction;         private float MaxTimeOfReaction;      private Double MaxRoundUp;       // Script references.     private InstructionsScript GetInstructionScript;     // Una referencia a mi propio cóigo para poder accesar a sus funciones.     private Metric MetricScript;      // Use this for initialization     void Start(){          // Este script es a donde voy a enviar las méricas procesadas.         MetricScript = GetComponent<Metric>();         /* Busco el script de las instrucciones, para poder comparar el objeto que pasa             el raycast con el nombre del objeto que esta pidiendo las instrucciones. */         GetInstructionScript = FindObjectOfType<InstructionsScript>();          AverageTOR = GetInstructionScript.EnglishM == false ? "Tiempo de reacción más largo" : "Longest Reaction Time ";     }      // _________________________________________________________________________________________________________________________________________________________________________________________      public void ReactionTimePerInstruction(){          CountMetricPerInstruction();     }      // _________________________________________________________________________________________________________________________________________________________________________________________      // Esta función cuenta cuántas veces el niño cumplió las condiciones de esta métrica.      void CountMetricPerInstruction(){          if (IsCounted == false){              ButtonPress = DateTime.Now;             // Aquíaco el tiempo de reacció del niñ.             TimeToReact = ButtonPress - InstructionsScript.InstructionTime;             // Aquíonvierto “TimeToReact” de un “TimeSpan” a un float, para poderlo pasar a la funció que crea el string que se manda al writer.             MetricValuePerInstruction = float.Parse(TimeToReact.TotalSeconds.ToString());             ReactionsTimesList.Add(MetricValuePerInstruction);             // Cambio el bool a true para que no se registre más de un tiempo de reacción.             IsCounted = true;         }     }      // _________________________________________________________________________________________________________________________________________________________________________________________      // Esta funció procesa la informació de cada ronda de instrucciones.     public void CopyCountMetricPerInstruction(){          IsCounted = false;     }      // _________________________________________________________________________________________________________________________________________________________________________________________      // Esta funció lo que hace es crear la ultima entrada de méricas para el archivo de texto con los resultados finales.     public void EndGameMetricValues(){          // Aquíaco el tiempo má largo de reacció del niñ.         MaxTimeOfReaction = ReactionsTimesList.Max();         // Aqui redondeo el valor del MaxTime a 2 digitos.         MaxRoundUp = MaxTimeOfReaction;          if (GetInstructionScript.EnglishM == false){         // Aqui utilizo normal la función que ya habia creado para mandar a escribir al archivo.             MetricScript.FinalLogWrite(AverageTOR + " = ", (float)Math.Round(MaxRoundUp, 2), " segundos" + "\n\n");         }          else{             MetricScript.FinalLogWrite(AverageTOR + " = ", (float)Math.Round(MaxRoundUp, 2), " seconds" + "\n\n");         }     } }